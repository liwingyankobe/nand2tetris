// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
	Not(in=instruction[15], out=ains);
	Or(a=ains, b=instruction[5], out=updatea);
	And(a=instruction[15], b=instruction[4], out=updated);
    ARegister(in=address, load=updatea, out=outa, out[0..14]=addressM);
	DRegister(in=result, load=updated, out=x);
	Mux16(a=outa, b=inM, sel=instruction[12], out=y);
	ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=result, out=outM, zr=zr, ng=ng);
	Mux16(a[0..14]=instruction[0..14], b=result, sel=instruction[15], out=address);
	And(a=instruction[15], b=instruction[3], out=writeM);
	And(a=instruction[2], b=ng, out=j1);
	And(a=instruction[1], b=zr, out=j2);
	Or(a=ng, b=zr, out=psi);
	Not(in=psi, out=ps);
	And(a=instruction[0], b=ps, out=j3);
	Or8Way(in[0]=j1, in[1]=j2, in[2]=j3, out=jumpi);
	And(a=instruction[15], b=jumpi, out=jump);
	PC(in=outa, load=jump, inc=true, reset=reset, out[0..14]=pc);
}

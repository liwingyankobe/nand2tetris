// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array str;
	field int length, max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength > 0) { let str = Array.new(maxLength); }
		let length = 0;
		let max = maxLength;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if (max > 0) { do str.dispose(); }
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if (j < length) { return str[j]; }
		return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if (j < length) { let str[j] = c; }
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if (length < max) {
			let str[length] = c;
			let length = length + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if (length > 0) { let length = length - 1; }
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int i, value;
		if (length = 0) { return 0; }
		let i = 0;
		if (str[0] = 45) { let i = 1; }
		let value = 0;
		while ((str[i] > 47) & (str[i] < 58) & (i < length)) {
			let value = 10 * value + str[i] - 48;
			let i = i + 1;
		}
		if (str[0] = 45) { let value = -value; }
		return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var Array digits;
		var boolean negative;
		var int i, quotient;
		let negative = val < 0;
		let val = Math.abs(val);
		let digits = Array.new(5);
		let i = 0;
		if (val = 0) {
			let digits[0] = 0;
			let i = 1;
		} else {
			while (val > 0) {
				let quotient = val / 10;
				let digits[i] = val - (quotient * 10);
				let val = quotient;
				let i = i + 1;
			}
		}
		if (i > max | (negative & (i + 1 > max))) {
			do digits.dispose();
			return;
		}
		let length = 0;
		if (negative) {
			let length = 1;
			let str[0] = 45;
		}
		while (i > 0) {
			let i = i - 1;
			let str[length] = digits[i] + 48;
			let length = length + 1;
		}
		do digits.dispose();
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
